# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: Float
  username: String
  email: String
  rankID: Float
  credits: Float
  vipPoints: Float
  activityPoints: Float
  look: String
  gender: UserGender
  motto: String
  accountCreatedAt: Float
  onlineStatus: UserOnlineStatus
  lastOnlineAt: Float
  homeRoomID: Float
  discordID: String
  language: String
  rpStats: RPStatsModel
  hasBetaCode: Boolean!
  gameSSO: String
  ipLast: String
  ipRegistered: String
  machineAddress: String
  rank: RankModel
}

enum UserGender {
  Male
  Female
}

enum UserOnlineStatus {
  Online
  Offline
}

type RankScopesModel implements RankScopesInterface {
  accessAdminPanel: Boolean
  manageArticles: Boolean
  manageUsers: Boolean
  manageRooms: Boolean
  manageBetaCodes: Boolean
  managePermissions: Boolean
  manageSupportTickets: Boolean
  manageStaffApplications: Boolean
  manageRadioRequests: Boolean
  manageBugReports: Boolean
  manageBans: Boolean
  manageChatlogs: Boolean
  manageGroups: Boolean
  manageLanguages: Boolean
  manageRanks: Boolean
  manageSite: Boolean
  manageWordFilter: Boolean
  manageStore: Boolean
  useNavigation: Boolean
}

interface RankScopesInterface {
  accessAdminPanel: Boolean
  manageArticles: Boolean
  manageUsers: Boolean
  manageRooms: Boolean
  manageBetaCodes: Boolean
  managePermissions: Boolean
  manageSupportTickets: Boolean
  manageStaffApplications: Boolean
  manageRadioRequests: Boolean
  manageBugReports: Boolean
  manageBans: Boolean
  manageChatlogs: Boolean
  manageGroups: Boolean
  manageLanguages: Boolean
  manageRanks: Boolean
  manageSite: Boolean
  manageWordFilter: Boolean
  manageStore: Boolean
  useNavigation: Boolean
}

type RankFlagsModel implements RankFlagsInterface {
  showOnStaffPage: Boolean
  acceptingApplications: Boolean
}

interface RankFlagsInterface {
  showOnStaffPage: Boolean
  acceptingApplications: Boolean
}

type RankModel {
  id: Float
  name: String
  badgeCode: String
  backgroundColor: String
  scopes: RankScopesModel
  flags: RankFlagsModel
}

type RPStatsModel {
  userID: Float
  healthCurrent: Float
  healthMax: Float
  energyCurrent: Float
  energyMax: Float
  armorCurrent: Float
  armorMax: Float
  hungerCurrent: Float
  hungerMax: Float
  corporationID: Float
  corporationRankID: Float
  gangID: Float
}

type SessionModel {
  id: Float
  userID: Float
  createdAt: String
  updatedAt: String
  user: UserModel!
}

type SessionCreatedModel {
  id: Float
  userID: Float
  accessToken: String
}

type SessionSSOModel {
  ssoToken: String!
}

type SessionUpdateEmailModel {
  success: Boolean!
}

type SessionUpdatePasswordModel {
  success: Boolean!
}

type SessionUpdateLanguageModel {
  success: Boolean!
}

type SessionDisconnectAccountModel {
  success: Boolean!
}

type Query {
  sessionByJWT(jwt: String!): SessionModel!
  session(id: Float!): SessionModel!
  sessions(other: ExtraArgs): [SessionModel!]!
  usersOnlineCount: Float!
  user(filter: UserFilterOneInput): UserModel!
  users(filter: UserFilterManyInput!): [UserModel!]!
}

input ExtraArgs {
  skip: Float
  take: Float
  order: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input UserFilterOneInput {
  id: Float
  username: String
}

input UserFilterManyInput {
  ids: [Float!]
  usernames: [String!]
  online: Boolean
  ipLast: [String!]
  ipRegistered: [String!]
  machineAddress: [String!]
  rankIDs: [Float!]
  orderBy: [UserOrderBy!]
  skip: Float
  limit: Float
}

enum UserOrderBy {
  ID_DESC
  CREDITS_ASC
  PIXELS_ASC
  POINTS_ASC
}

type Mutation {
  sessionCreateSSO: SessionSSOModel!
  sessionCreateWithCredentials(input: SessionCreateWithCredentialsInput!): SessionCreatedModel!
  sessionUpdateEmail(input: SessionUpdateEmailInput!): SessionUpdateEmailModel!
  sessionUpdatePassword(input: SessionUpdatePasswordInput!): SessionUpdatePasswordModel!
  sessionUpdateLanguage(input: SessionUpdateLanguageInput!): SessionUpdateLanguageModel!
  sessionDisconnectDiscord(input: SessionDisconnectAccountInput!): SessionDisconnectAccountModel!
  userCreate(input: UserCreateInput!): SessionCreatedModel!
  userUpdate(id: Float!, userChanges: UserUpdateInput!): Boolean!
  userDelete(id: Float!): Boolean!
}

input SessionCreateWithCredentialsInput {
  email: String!
  password: String!
}

input SessionUpdateEmailInput {
  email: String!
  password: String!
}

input SessionUpdatePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input SessionUpdateLanguageInput {
  language: String!
}

input SessionDisconnectAccountInput {
  confirm: Boolean!
}

input UserCreateInput {
  username: String!
  password: String!
  email: String!
  betaCode: String
  gender: String
  look: String
}

input UserUpdateInput {
  password: String
  email: String
  gender: UserGender
  look: String
}